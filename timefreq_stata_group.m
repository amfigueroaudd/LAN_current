function GLAN = timefreq_stata_group(GLAN,cfg)% REALIZA ESTADISTICA NOPARAMETRICA A TRIEMP-FRECUENCIA% v.0.0.1% %% cfg.%  subject  = [{}{}{}]%  comp 	=[n1 n2];  	% INDEX OF THE CONDITION TO COMPARED , ONLY TWO!!!%  alpha 	=0.05;%  m		='d'; OR ='i' 	% RELATIONSHEAP TO THE SAMPLES 'i'NDEPENDENT OR 'd'EPENDET%  bl		=[ 0 0.4];	% BASELINE%  mcp      = 1 or 0%  nrandom  = 2000%  %  %  %  Pablo Billeke%  Rodrigo Henriquez%  Francisco Zamorano%% SEARCH COMPARATIONif isfield(GLAN,'timefreq') %&& ~isempty(GLancomp)      nbcomp=size(GLAN.comp,2)+1;else      nbcomp=1;end a = what;pathd = a.path;clear a% search subject nametry sujetos = cfg.subject;GLAN.suject=sujetos;catch    try    sujetos = GLAN.subject;    catch    error('you must defined subject name in cfg.subject')    endend% % arreglar grupos% if iscell(sujetos)%    for g = 1:size(sujetos,1) %       a =  sujetos(g,:);%       %a = a()%       group(g).subject = a; %    end% end%%%%%try filesf = cfg.file.sf;       catch , filesf = '';    endtry fileprf = cfg.file.prf;     catch , fileprf = '';   endtry matprf = cfg.mat.prf;       catch , matprf='';      endtry matsf = cfg.mat.sf;         catch , matsf ='';      endtry    savesub = cfg.savesub;catch    savesub=0;end%%search condition indextrycond = cfg.comp;GLAN.timefreq.comp{nbcomp}=cond;catch    try    nbcomp = nbcomp -1;    cond = GLAN.timefreq.comp{nbcomp};    disp('we compared the last contition in GLAN.comp, which would repite a realizated comparison')    catch    error('you must defined index of condition to compared');    endend%search relation to samplestrym = cfg.s;GLAN.timefreq.cfg.s{nbcomp} = m;catch    trym = GLAN.timefreq.cfg.s{nbcomp};catchm = 'i';GLAN.timefreq.cfg.s{nbcomp} = m;disp('you don'' defined the relatioship to the samples, so  we used statistic for Independent samples');    endend%search alphatryalpha = cfg.alpha;GLAN.timefreq.cfg.alpha{nbcomp} = alpha;catch    tryalpha = GLAN.timefreq.cfg.alpha{nbcomp};catchalpha = 0.05;GLAN.timefreq.cfg.alpha{nbcomp} = alpha;disp('you don'' defined the alpha, so  we used 0,05 ');    endend%search baselinetry    bl = cfg.bl;    GLAN.timefreq.cfg.bl{nbcomp} = bl;catch    try        bl = GLAN.timefreq.cfg.bl{nbcomp-1};    catch        bl= 0;        GLAN.timefreq.cfg.bl{nbcomp} = bl;        disp('you don'' defined the baseline [cgf.bl] ');    endend% SEARCH STATISTICAL CONFIGURATIONStry    mcp = cfg.mcp;catch    mcp=0;    disp('I''ll not made correction for multiple comparison')endif mcp ==1    try        nrandom = cfg.nrandom;    catch        nrandom = 2000;    endendtry    ifstata = cfg.stata;catch    ifstata = 1;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%BEGINING OF THE COMPUTATIONS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LOAD THE SUJECT'S MAT FILEfor g = cond% loop per groupsfor s = 1:length(sujetos)    if isempty(sujetos{g,s})       disp([ num2str(s-1) 'readed suject condition ' num2str(g)  ]);        break    endeval(['load  ' sujetos{g,s} ' ']);eval(['LAN = ' sujetos{g,s} ';' ]);LAN = lan_check(LAN);ccc = length(LAN);% EXTRATC DATA FOR LAN SIMPLE STRUCTURS    for c = nbcomp:ccc %cond                    if isfield(LAN{c}.freq,'powspctrm')                v_freq{g,c}(:,:,:,s) = LAN{c}.freq.powspctrm;            end                    if s == 1  %%% KEEP SPEFIFICATION FOR DEL GLAN STRUCTUR                GLAN.time = LAN{c}.time(1,:);                    GLAN.srate = LAN{c}.srate;                 GLAN.nbchan = LAN{c}.nbchan;                nbchan = LAN{c}.nbchan;                GLAN.timefreq.freq = LAN{c}.freq.freq;                GLAN.timefreq.time = LAN{c}.freq.time;                GLAN.timefreq.cond{c} = LAN{c}.cond;                GLAN.timefreq.cond{c} = LAN{c}.cond;                    try                    GLAN.chanlocs = GLAN{c}.chanlocs                    catch                        disp('There is not channel location file')                    end        end    end    clear LAN;    eval(['clear ' sujetos{g,s} ' ']);    endend % loop g groups%%%%%%%%%%%%%%%%%%%%%%%%%%%%% STATISTICAL COMPUTATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%for c = nbcomp:ccc% por condiciones    if ifstata[ pval, hh, stat ] = nonparametric(v_freq{cond(1),c},v_freq{cond(2),c},alpha,m,0);GLAN.timefreq.pval{nbcomp,c} = pval;GLAN.timefreq.hh{nbcomp,c} = hh;GLAN.timefreq.stat{nbcomp,c} = stat;       endGLAN.timefreq.comp{nbcomp} = cond;%%GLAN.timefreq.funstat{nbcomp,c} = ['non-paramtric for ' m ' samples']; %GLAN.timefreq.data{cond(1),c} =  mean(v_freq{cond(1),c},4);GLAN.timefreq.data{cond(2),c} =  mean(v_freq{cond(2),c},4);%     if savesub        GLAN.timefreq.subdata(:,c) =  v_freq(:,c);     endif c == cccclear v_freq;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MULTIPLE COMPARISON CORRECTION FOR ELECTRODES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if mcp == 1        disp('Making Multiple Comparision correction')        hhc = zeros(size(hh));for e = 1:nbchan       %e    clusig = bwlabeln(squeeze(hh(:,e,:)));    ccont=0;    for cc = 1:max(max(clusig))       paso = zeros(size(clusig));        paso(clusig==cc)=1;        pasoR=reduce(paso);       %%       lc_f = size(pasoR,1);       l_f = size(paso,1);       lc_t = size(pasoR,2);       l_t = size(paso,2);       %%       for r = 1:nrandom           pt = [];           pf = [];           st= [];           pf = rand * (l_f-lc_f);           pf = fix(pf+1);           pt = rand * (l_t-lc_t);           pt = fix(pt+1);           %           st = zeros(size(paso));           st(pf:pf+(lc_f-1),pt:pt+(lc_t-1)) = pasoR;           st = st .* squeeze(stat(:,e,:));           stran(r) = sum(sum(st));       end       %%%       streal = zeros(size(paso));       streal(clusig==cc) = 1;       streal = sum(sum(streal .* squeeze(stat(:,e,:))));       pval = sum(streal > stran)/nrandom;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%       %%%       if pval < alpha          ccont = 1 + ccont;          hhp = zeros(size(paso));          pvalp = zeros(size(paso));          hhp(clusig==cc)=1;          hhc(:,e,:) = squeeze(hhc(:,e,:)) + hhp;          pvalp(clusig==cc)=pval;          pvalc(:,e,:) = pval;       end  end     disp(['electrode n= ' num2str(e) ' encontre ' num2str(ccont) ' de ' num2str(max(max(clusig))) ]);end% fo eend% if mcp%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MULTIPLE COMPARISONS CORRECTION FOR ELECTRODE CLUSTERS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%try    electrodemat = GLAN.chanlocs(1).electrodemat   em=1;catch   disp('You must spicify the electrode array')   em=0;end%%%%%%%%if em==1    %%%MAKE NEW 4D ARRAY    for e = 1:nbchan        [y x] = find(electrodemat==e);        newhh(y,x,:,:) = hhc(:,e,:);        newstat(y,x,:,:) = stat(:,e,:);        %%% MARK THE NO-ELECTRODE POSITION        if e ==nbchan          [y x] = find(electrodemat==e);          no_e = zeros(size(newhh))          for noe = 1:length(y)              no_e(y(noe),x(noe),:) =2;          end        end    end% for e        %SEARCH ADJACENTIA    clusig = bwlabeln(newhh);% we use multi-conected clusters    hhp = zeros(size(newhh));    pvalp = zeros(size(newhh));    for nc = 1:maxmax((max(max(clusig))));        disp(['evaluando cluster ' num2str(nc) ]);        paso = zeros(size(newhh));        paso(clusig==nc) =1;        pasoR = reduce4(paso); %%%%% falta        [ym xm zm wm] = size(paso);        [y x z w] = size(pasoR);        cuantos_e = sum(sum(any(any(pasoR,4),3)));% colapso el tiempo y freq        [donde_ex donde_ey] = find(any(any(pasoR,4),3))% colapso el tiempo y freq        nr =1;        while  nr <= nrandom            zr = fix(rand * (zm-z))+1;            wr = fix(rand * (zm-z))+1;            %xr = rand * (xm-x)+1;             yr = fix(rand * (ym-1))+1;             xr = fix(rand * (xm-1))+1;            %            rancluster = zeros(size(newstata));            nelec = 1            while nelec <= cuantos_e                                    rancluster(yr,xr,zr:(zr+z-1),wr:(wr+w-1)) = ...                               pasoR(donde_ex(nelec),donde_ey(nelec),:,:);                    usado(1,nelec) = yr;                    usado(2,nelec) = xr;                    si=0;                    while si == 0;                        yrp = yr + fix( (rand *2) -1);                        xrp = xr + fix( (rand *2) -1);                        if ( sum(yrp==usado(1,:)) || sum(xrp==usado(2,:)) ) && ((yrp<=ym) && (xrp<=xm) )                            %                            %  OJO ARREGLAR QUE NO UTILIZE LUGARES SIN                            %  ELECTRODOS                            %                            yr = yrp;                            xr = xrp;                            si =1;                        end                     end                            end            %            comprobador = max(max(max(rancluster+no_e)));            %                if comprobador<3 % eviatr cluster fuera de lso electrodos                    s_perrandom(nr) = sum(sum(sum(newstata*rancluster)));                    %                    nr = nr +1;                end        end% while nr        %        p_val_cc= sum(  sum(sum(sum(sum(newstata*paso)))) > s_perrandom )/nrandom                if p_val_cc < alpha            %ccont = 1 + ccont;            %            disp('accepted')            %            hhp(clusig==nc)=1;            pvalp(clusig==nc) = p_val_cc;            %            %            %        else           disp('rejected')        end    end% for nc    %%% combert newhh to hh   for e = 1:nbchan        [y x] = find(electrodemat==e);        hhcc(:,e,:)=hhp(y,x,:,:);        pvalcc(:,e,:)=pvalp(y,x,:,:);           end% for e         hhc = hhcc;    pvalc = pvalcc;    %%%%%%%%%%%%%%%%%%%%end%%%if em==1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%tryGLAN.erp.hhc{nbcomp,c}=hhc;GLAN.erp.pvalc{nbcomp,c}=pvalc;end%%%%%%%%%%%%%%%%%%%%endend%%% function%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUBRUTINAS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%---- subrutinafunction cluster = reduce(cluster,dir)% cluster 2d matif nargin < 2, dir=5; end%------------------if (dir == 1) || (dir == 5)    if ~any(cluster(1,:),2)        cluster = cluster(2:size(cluster,1),:);        cluster = reduce(cluster,1);    end    end%-------------------if (dir == 2) || (dir == 5)    if ~any(cluster(size(cluster,1),:),2)        cluster = cluster(1:(size(cluster,1)-1),:);        cluster = reduce(cluster,2);    endend%-------------------if (dir == 3) || (dir == 5)    if ~any(cluster(:,size(cluster,2)),1)        cluster = cluster(:,1:(size(cluster,2)-1));        cluster = reduce(cluster,3);    endend%-------------------if (dir == 4) || (dir == 5)    if ~any(cluster(:,1),1)        cluster = cluster(:,2:(size(cluster,2)));        cluster = reduce(cluster,4);    endendend%SUBRUTINA FOR REDUCE CLUSTER ONLY A MATRIZ OF SIGNIFICAN AREASfunction cluster = reduce4(cluster,dir)% cluster 4d matif nargin < 2, dir=9; end%------------------if (dir == 1) || (dir == 9)    if ~any(any(any(any((cluster(1,:,:,:))))))        cluster = cluster(2:size(cluster,1),:,:,:);        cluster = reduce4(cluster,1);    end    end%-------------------if (dir == 2) || (dir == 9)    if ~any(any(any(any(cluster(size(cluster,1),:,:,:)))))        cluster = cluster(1:(size(cluster,1)-1),:,:,:);        cluster = reduce4(cluster,2);    endend%-------------------%-------------------if (dir == 3) || (dir == 9)        %~any(cluster(:,size(cluster,2)),1)    if ~any(any(any(any(cluster(:,size(cluster,2),:)))))        cluster = cluster(:,1:(size(cluster,2)-1),:,:);        cluster = reduce4(cluster,3);    endend%-------------------if (dir == 4) || (dir == 9)    %~any(cluster(:,1),1)    if ~any(any(any(any(cluster(:,1,:,:)))))        cluster = cluster(:,2:(size(cluster,2)),:,:);        cluster = reduce4(cluster,4);    endend%-------------------%-------------------if (dir == 5) || (dir == 9)        %~any(cluster(:,size(cluster,2)),1)    if ~any(any(any(any(cluster(:,:,size(cluster,3),:)))))        cluster = cluster(:,:,1:(size(cluster,3)-1),:);        cluster = reduce4(cluster,5);    endend%-------------------if (dir == 6) || (dir == 9)    %~any(cluster(:,1),1)    if ~any(any(any(any(cluster(:,:,1,:)))))        cluster = cluster(:,:,2:(size(cluster,3)),:);        cluster = reduce4(cluster,6);    endend%-------------------%-------------------if (dir == 7) || (dir == 9)        %~any(cluster(:,size(cluster,2)),1)    if ~any(any(any(any(cluster(:,:,:,size(cluster,4))))))        cluster = cluster(:,:,:,1:(size(cluster,4)-1));        cluster = reduce4(cluster,7);    endend%-------------------if (dir == 8) || (dir == 9)    %~any(cluster(:,1),1)    if ~any(any(any(any(cluster(:,:,:,1)))))        cluster = cluster(:,:,:,2:(size(cluster,4)));        cluster = reduce4(cluster,8);    endend%-------------------end